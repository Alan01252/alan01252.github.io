<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Javascripts on Alan Hollis</title>
    <link>http://alanhollis.com/javascript/index.xml</link>
    <description>Recent content in Javascripts on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jan 2017 21:44:58 +0530</lastBuildDate>
    <atom:link href="http://alanhollis.com/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Node.js: Testing a Node.js API with Mocha, Async, and Should</title>
      <link>http://alanhollis.com/javascript/node-js-testing-a-node-js-api-with-mocha-async-and-should/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/javascript/node-js-testing-a-node-js-api-with-mocha-async-and-should/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Node.js: Testing a Node.js API with Mocha, Async, and Should
                    &lt;/h2&gt;
                &lt;/div&gt;

                &lt;p&gt;Application Overview&lt;/p&gt;

                &lt;p&gt;
                    The API is broken down into bundles, each bundle is stored in a separate folder and contains a model
                    and
                    a controller.
                &lt;/p&gt;

                &lt;p&gt;
                    The application has the following directory structure.
                &lt;/p&gt;
                &lt;pre class=&#34;prettyprint linenums&#34;&gt;-/bundles/

-/bundles/foo/model.js
-/bundles/foo/controller.js

-/bundles/bar/model.js
-/bundles/bar/controller.js&lt;/pre&gt;

                &lt;p&gt;
                    The controllers extend from a base module called controller.js which implements the
                    create/review/update/delete code.
                &lt;/p&gt;

                &lt;p&gt;Testing the API&lt;/p&gt;

                &lt;p&gt;
                    The rest of this article will concentrate on the DELETE api call.

                &lt;/p&gt;
                &lt;p&gt;

                    This operation doesn&#39;t delete the model, but sets a
                    sets the flag &#34;isDeleted&#34; against the model to true.
                &lt;/p&gt;

                &lt;p&gt;
                    Before the test, the code must perform three operations a CREATE, then a DELETE, and finally a READ
                    where
                    we&#39;ll test the isDeleted flag has been set.
                &lt;/p&gt;

                &lt;p&gt;Breaking down the tests using Mocha&lt;/p&gt;

                &lt;p&gt;
                    First describe the test
                &lt;/p&gt;
                &lt;pre&gt;
                    &lt;code class=&#34;javascript hljs&#34;&gt;describe(&#39;API Deletion&#39;, function () {
}
                    &lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    This gives a high level description of the tests contained in this file. Everything the code needs
                    to
                    perform the test should be defined and instantiated at the top of this function.
                &lt;/p&gt;
                &lt;pre&gt;
                    &lt;code class=&#34;javascript hljs&#34;&gt;describe(&#39;Deleting&#39;, function () {
    var should = require(&#39;should&#39;),
         async = require(&#39;async&#39;),
         fs = require(&#39;fs&#39;),
         api = require(&#39;./api.js&#39;);
         //Loop through bundles and describe our next step
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    The next step is to loop through all the bundles and describe the test specific to the bundle we
                    want to
                    test
                &lt;/p&gt;
                &lt;pre&gt;
                &lt;code class=&#34;javascript hljs&#34;&gt;var bundles = fs.readdirSync(&#39;./bundles&#39;);
bundles.forEach(function (item) {
    describe(item, function () {
    //Call the before function and populate our database with the data to test against
    }
}&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;p&gt;
                    We define a before function that will run the code to create, delete and get the model which we&#39;ll
                    later test for the isDeleted flag.
                &lt;/p&gt;

                &lt;pre&gt;
                &lt;code class=&#34;javascript hjls&#34;&gt;var fixture = require(&#39;./bundles/fixture.js&#39;);
    var deleteResponse = null;

    before(function (done) {

	async.waterfall([

	function create(callback) {
	    api.create(fixture, function (error, response, body) {
		var json = JSON.parse(body);
		callback(null, json);
	    });
	},

	function delete(json, callback) {
	    api.delete(item, json._id, function (error, response, body) {
		var deleteResponse = {
		    id: json._id,
		    error: error,
		    body: body
		};
		callback(null, deleteResponse)
	    });
	},

	function get(deleteResponse, callback) {
	    api.getOne(item, deleteResponse.id, function (error, response, body) {

		var getResponse = {
		    id: deleteResponse.id,
		    error: error,
		    response: response,
		    body: body,
		}

		callback(null, getResponse)

	    });
	}

	], function (err, results) {
	    deleteResponse = results;
	    done();
	});
});
//Define the tests&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;p&gt;
                    Passing the done callback into the before method allows asynchronous testing of the api.
                &lt;/p&gt;

                &lt;p&gt;
                    Using the asyc libraries waterfall function we can make sure that the before function is only
                    completed
                    once all our API calls are finished.
                &lt;/p&gt;

                &lt;p&gt;
                    Using async also helps the clarity of the code, the waterfall function allows another developer to
                    see
                    exactly the steps going to be taken in the before function and in what order.
                &lt;/p&gt;


                &lt;p&gt; The complete solution&lt;/p&gt;
                &lt;pre&gt;
                &lt;code class=&#34;javascript hjls crayon-selected&#34;&gt;describe(&#39;Deleting&#39;, function () {
    var should = require(&#39;should&#39;),
        async = require(&#39;async&#39;),
        fs = require(&#39;fs&#39;),
        api = require(&#39;./api.js&#39;);

    //Loop through bundles
    var bundles = fs.readdirSync(&#39;./bundles&#39;);
    bundles.forEach(function (bundle) {

        describe(bundle, function () {

            //Get dummy data
            var fixture = require(&#39;./bundles/fixture.js&#39;);
            var deleteResponse = null;

            //Persist dummy data
            before(function (done) {
                async.waterfall([

                function create(callback) {
                    api.create(fixture, function (error, response, body) {
                        var json = JSON.parse(body);
                        callback(null, json);
                    });
                },

                function delete(json, callback) {
                    api.delete(item, json._id, function (error, response, body) {
                        var deleteResponse = {
                            id: json._id,
                            error: error,
                            body: body
                        };
                        callback(null, deleteResponse)
                    });
                },

                function get(removeResponse, callback) {
                    api.getOne(item, removeResponse.id, function (error, response, body) {
                        var objectResponse = {
                            id: removeResponse.id,
                            error: error,
                            response: response,
                            body: body,
                        }
                        callback(null, objectResponse)
                    });
                }],
               //End of waterfall
               function (err, results) {
                    //store results
                    deleteResponse = results;
                    //Tell before function everything is done
                    done();
                });
            });

             //Tests
            it(&#34;shouldn&#39;t fail&#34;, function () {
                deleteResponse.response.statusCode.should.equal(200);
            });

            it(&#34;should respond with valid JSON&#34;, function () {
                deleteResponse.response.should.be.json;
            });

            it(&#34;should be soft deleted&#34;, function () {
                var json = JSON.parse(deleteResponse.body);
                json.isDeleted.should.be.equal(true);
            });
        }
        }
    }&lt;/code&gt;
                    &lt;/pre&gt;


            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>