<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architectures on Alan Hollis</title>
    <link>http://alanhollis.com/architecture/index.xml</link>
    <description>Recent content in Architectures on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2017 12:44:58 +0530</lastBuildDate>
    <atom:link href="http://alanhollis.com/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Architecture</title>
      <link>http://alanhollis.com/architecture/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/architecture/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;Architecture&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;Case Studies&lt;/h2&gt;
                &lt;/div&gt;


                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Agricamera&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    Agricamera is a start-up competing in the CCTV industry. The unique value proposition is that
                    compared
                    to other CCTV providers their solution requires no third party intervention and &#34;just works&#34;.
                &lt;/p&gt;

                &lt;p&gt;
                    In order to achieve this goal the architecture needed to tackle the following challenges:
                &lt;ul&gt;
                    &lt;li&gt;Communicate with cameras behind home routers without the need for customers needing to log on
                        to the router
                    &lt;/li&gt;
                    &lt;li&gt;Allow support staff to diagnose networking problems&lt;/li&gt;
                    &lt;li&gt;Platform must be available at all times&lt;/li&gt;
                    &lt;li&gt;Customer must have best possible view of camera depending on where they current are, local
                        network / remote viewing
                    &lt;/li&gt;
                    &lt;li&gt;Cameras must be accessible via the widest range of devices&lt;/li&gt;
                    &lt;li&gt;Quickly scalable as customer base grows&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;
                    The bulk of the application is cloud basz , with individual camera controllers running on
                    Agricamera&#39;s
                    customer networks. Every server is replicated more than one and high availability considered at all
                    points.
                    The application was designed to be internet based from the outset, differentiating Agricamera from
                    most
                    of its competitors.
                &lt;/p&gt;

                &lt;p&gt;
                    A single board computer is sold to each customer which sits on their network. The board is
                    programmed to automatically discover
                    cameras by scanning for appropriate mac addresses and then registering the cameras with the
                    application
                    servers via a web socket connection. This prevents the need to alter/configure their routers to
                    allow
                    remote access to their cameras.
                &lt;/p&gt;

                &lt;p&gt;
                    There are two methods by which the user can access their cameras. A web-based browser application,
                    and a
                    mobile application. The web-based application is written in PHP using require and knockout js. The
                    mobile application is built using the Ionic Framework and Angular.js which allow rapid development
                    across the largest number of devices whilst keeping one shared code base.
                &lt;/p&gt;

                &lt;p&gt;
                    Both the desktop and mobile applications are smart enough to work out whether the cameras are
                    available
                    on the local network and will pick the appropriate connection method depending on where the user is.
                    Agricamera&#39;s admin staff are able to configure different resolution streams on a per connection
                    and per device method. This ensures that the customers are always getting the best possible viewing
                    experience from the
                    platform.
                &lt;/p&gt;

                &lt;p&gt;
                    Each node application server runs on a single core, with Nginx used to balance the load between each
                    of them. Additionally, traffic is balanced via
                    Nginx for the web servers and the Nginx daemon running on the engines. This allows both vertical and
                    horizontal scaling of engine
                    servers. This is used to full effect when Agricamera&#39;s platform is used to stream popular events,
                    such as sheep shearing world records.
                &lt;/p&gt;

                &lt;p&gt;
                    The entire software platform is automatically monitored using Check MK and Nagios. Thorough
                    logging via ElasticSearch/LogStash and Kibana allow quick resolutions of support queries and technical
                    issues as they arise. Every server in the system is reproducible via Ansible.
                &lt;/p&gt;


                &lt;img src=&#34;http://alanhollis.com/agricamera-architecture.png&#34; class=&#34;img-rounded img-responsive&#34; style=&#34;width: 100%;&#34;&gt;

                &lt;p&gt;
                    At the time of writing the application is managing over 100 permanently connected camera controllers
                    with over 300
                    cameras streaming in real time.
                &lt;/p&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        TheFarmingForum&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;The Farming Forum was gaining popularity and quickly entering a level where the risks of running the
                    forum single on a server were no longer appropriate for the business.&lt;/p&gt;

                &lt;p&gt;
                    Xenforo is not designed to run on multiple servers out of the box and therefore understanding how
                    the existing system worked was crucial to the design of any other server. Assets were the big
                    problem
                    to solve as in order to move from one server to multiple, uploads and attachments created by forum
                    members would need to be moved into the cloud.
                &lt;/p&gt;

                &lt;p&gt;
                    Plugins were found for Xenforo which automated the process of assets being uploaded to the cloud.
                    A custom bash script using S3cmd was written which would transfer the existing assets into S3 and
                    update
                    the Xenforo database as appropriate.
                &lt;/p&gt;

                &lt;p&gt;
                    High availability would be achieved by utilising Linodes Nodebalancers. A single Nodebalancer would
                    sit in front of the web servers and round robin the traffic between them. Memcached was chosen to
                    store
                    the sessions information and the Xenforo software adapted to write all session information to each
                    Memcached instance.
                &lt;/p&gt;

                &lt;p&gt;
                    The database would be run in Master / Master mode with only one database being connected to at any
                    point
                    by the Xenforo software. Monitoring had shown that the biggest bottleneck in the application was CPU
                    on the
                    web servers and therefore scaling the database was not a priority. A Rundeck task would be created
                    that
                    would allow the master database server to swap over to the slave in case of downtime.
                &lt;/p&gt;

                &lt;img src=&#34;http://alanhollis.com/tff.png&#34; class=&#34;img-rounded img-responsive&#34; style=&#34;width: 100%;&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        The-Hpo.co.uk&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    The HPO came to me looking for help updating a critical legacy application to something more robust,
                    faster and reliable.
                &lt;/p&gt;

                &lt;p&gt;
                    By looking and understanding the existing system and how it interacted we were able to build a new
                    solution
                    which provided all the functionality of the previous system and satisfied all the criteria of above.
                &lt;/p&gt;

                &lt;p&gt;
                    The new system would comprise of five layers:
                &lt;/p&gt;

                &lt;ul&gt;
                    &lt;li&gt;An API to interact with the relational database&lt;/li&gt;
                    &lt;li&gt;A new thin client Javascript front end client&lt;/li&gt;
                    &lt;li&gt;A data warehouse which would store data in third normal form&lt;/li&gt;
                    &lt;li&gt;An Extract Transform Load application to perform the data integration&lt;/li&gt;
                    &lt;li&gt;A reporting engine to sit in front of the data warehouse to render the data in a meaningful way
                    &lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;
                    The application would reside entirely in the cloud. A single instance would run all the software
                    together
                    to keep costs low and the architecture simple. Thought was given as to how this could be split in
                    the
                    future,however, this design best fit the customer&#39;s needs at the present time. PHP and Javascript
                    frameworks
                    were chosen based on the clients existing experience with these technologies.
                &lt;/p&gt;

                &lt;p&gt;
                    The ETL engine would be built using the Apache Camel Library. Camel supports a number of enterprise
                    integration patters which were well suited to this project. Camel supports being able to write
                    custom
                    processors in Java and this was used to handle the more complex data transformations that were
                    needed
                    to implement HPO&#39;s reporting algorithms.
                &lt;/p&gt;

                &lt;p&gt;
                    SendGrid would be used to handle the emailing as this gave the customer far more visibility over
                    emails
                    that were sent from the reporting engine than before and would reduce what was a large contributor
                    to
                    the support overheads the customer was having. This also saved on the development time of the final
                    application.
                &lt;/p&gt;
            &lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>