<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Architectures on Alan Hollis</title>
    <link>http://alanhollis.com/architecture/index.xml</link>
    <description>Recent content in Architectures on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 01 Feb 2017 12:44:58 +0530</lastBuildDate>
    <atom:link href="http://alanhollis.com/architecture/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Architecture</title>
      <link>http://alanhollis.com/architecture/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/architecture/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;Architecture&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;Case Studies&lt;/h2&gt;
                &lt;/div&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        TheFarmingForum.co.uk&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;The Farming Forum was gaining popularity and quickly entering a level where the risks of running the
                    forum single on a server were no longer appropriate for the business.&lt;/p&gt;

                &lt;p&gt;
                    Xenforo is not designed to run on multiple servers out of the box and therefore understanding how
                    the existing system worked was crucial to the design of any other server. Assets were the big
                    problem
                    to solve as in order to move from one server to multiple, uploads and attachments created by forum
                    members would need to be moved into the cloud.
                &lt;/p&gt;

                &lt;p&gt;
                    Plugins were found for Xenforo which automated the process of assets being uploaded to the cloud.
                    A custom bash script using S3cmd was written which would transfer the existing assets into S3 and
                    update
                    the Xenforo database as appropriate.
                &lt;/p&gt;

                &lt;p&gt;
                    High availability would be achieved by utilising Linodes nodebalancers. A single nodebalancer would
                    sit in front of the web servers and round robyn the traffic between them. Memcached was chosen to
                    store
                    the sessions information and the Xenforo software adapted to write all session information to each
                    memcached instance.
                &lt;/p&gt;

                &lt;p&gt;
                    The database would be run in Master / Master mode with only one database being connected to at any
                    point
                    by the Xenforo software. Monitoring had shown that the biggest bottleneck in the application was CPU
                    on the
                    web servers and therefore scaling the database was not a priority. A Rundeck task would be created
                    that
                    would allow the master database server to swap over to the slave in case of downtime.
                &lt;/p&gt;

                &lt;img src=&#34;http://alanhollis.com/tff.png&#34; class=&#34;img-rounded img-responsive&#34; style=&#34;width: 100%;&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        The-Hpo.co.uk&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    The HPO came to me looking for help updating a critical legacy application to something more robust,
                    faster and reliable.
                &lt;/p&gt;

                &lt;p&gt;
                    By looking and understanding the existing system and how it interacted we were able to build a new
                    solution
                    which provided all the functionality of the previous system and satisfied all the criteria of above.
                &lt;/p&gt;

                &lt;p&gt;
                    The new system would comprise of five layers:
                &lt;/p&gt;

                &lt;ul&gt;
                    &lt;li&gt;An API to interact with the relational database&lt;/li&gt;
                    &lt;li&gt;A new thin client Javascript front end client&lt;/li&gt;
                    &lt;li&gt;A data warehouse which would store data in third normal form&lt;/li&gt;
                    &lt;li&gt;An Extract Transform Load application to perform the data integration&lt;/li&gt;
                    &lt;li&gt;A reporting engine to sit in front of the datawarehouse to render the data in a meaningful way
                    &lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;
                    The application would reside entirely in the cloud. A single instance would run all the software
                    together
                    to keep costs low and the architecture simple. Thought was given as to how this could be split in
                    the
                    future however this design best fit the customers needs at the present time. PHP and Javascript
                    frameworks
                    were chosen based on the clients existing experience with these technologies.
                &lt;/p&gt;

                &lt;p&gt;
                    The ETL engine would be built using the Apache Camel Library. Camel supports a number of enterprise
                    integration patters which were well suited to this project. Camel supports being able to write
                    custom
                    processors in Java and this was used to handle the more complex data transformations that were
                    needed
                    to implement HPO&#39;s reporting algorithms.
                &lt;/p&gt;

                &lt;p&gt;
                    SendGrid would be used to handle the emailing as this gave the customer far more visibility over
                    emails
                    that were sent from the reporting engine than before, and would reduce what was a large contributor
                    to
                    the support overheads the customer was having. This also saved on development time of the final
                    application.
                &lt;/p&gt;
            &lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>