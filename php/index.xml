<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phps on Alan Hollis</title>
    <link>http://alanhollis.com/php/index.xml</link>
    <description>Recent content in Phps on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jan 2017 21:44:58 +0530</lastBuildDate>
    <atom:link href="http://alanhollis.com/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Comparing go with PHP</title>
      <link>http://alanhollis.com/php/comparing-go-with-php/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/comparing-go-with-php/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Go compared with php. Arrays and slices&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p&gt;This is part of a series of articles comparing the language of Go to PHP&lt;/p&gt;


                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Variable assignment&lt;/h3&gt;
                &lt;p&gt;
                    In PHP variable assigned is very simple :
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myString = &#34;My String&#34;;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go this is a little different. Go is statically typed meaning those familiar with other
                    statically
                    typed languages would expect to see something like
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;java hljs&#34;&gt;String myString = &#34;My String&#34;;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go the type can be inferred from the expression. For instance to assign a string to a variable in
                    Go
                    you can do any one of the following:
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;&gt;var myString = &#34;hello&#34;
//or
myString := &#34;Hello&#34;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    To change the value later Go a single = is used
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;myString := &#34;myString&#34;
myString = &#34;foo&#34;
fmt.Println(myString) //Prints out Foo&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    I prefer the way variable assignment is done in Go. It makes it very easy to see where the variable
                    has
                    been instantiated, where it&#39;s been changed and in 99% of times the type inference isn&#39;t an issue.
                &lt;/p&gt;

                &lt;p&gt;
                    Also note that the use of semicolons in Golang is optional
                &lt;/p&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    If statements&lt;/h3&gt;
                If statements are very similar in both PHP and Golang in PHP
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;if($i &lt; 3) {
  echo &#34;$i is less than 3&#34;;
                     &lt;/code&gt;
}&lt;/pre&gt;
                In Go
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;if x &gt; 0 {
   fmt.Println(x,&#34;is greater than zero&#34;)
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    The biggest difference are the optional brackets around the if statement. Braces are also mandatory
                    and
                    the first brace must be on the same line as the if.
                &lt;/p&gt;
                &lt;p&gt;
                    This fits with the &lt;a
                        href=&#34;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md&#34;&gt;psr-2
                    PHP fig standards&lt;/a&gt; and as such is really familiar to most PHP developers.
                &lt;/p&gt;
                &lt;p&gt;
                    The biggest difference is it&#39;s common to see an initialization statement at the beginning of the if
                    statement, so instead of seeing this:
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$i = getMyVar();
if($i &lt; 3) {
  echo &#34;$i is less than 3&#34;;

}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    You see
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;if x:=getMyVar(); x &gt; 0 {
    fmt.Println(x,&#34;is greater than zero&#34;)
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    Personally I&#39;m not keen on this syntax as I find it slightly harder to realise at a glance what the
                    if
                    statement is checking, but this is purely a matter of preference.
                &lt;/p&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Loops&lt;/h3&gt;
                &lt;p&gt;
                    Go takes an usual step when it comes to looping. The familiar while loop seen is most of languages
                    based
                    on C has been unified with the for loop meaning to do this
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;while($i &lt; 3) {
$i++
}&lt;/code&gt;
                &lt;/pre&gt;
                In Go you write
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;for i &lt; 4 {
    i++
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    When I&#39;m writing PHP code I tend to use &lt;em&gt;while&lt;/em&gt; for longer running loops, and
                    &lt;em&gt;for&lt;/em&gt; for loops over a finite set of data. I find it harder when writing Go code to see, at a
                    glance see what type of loop, the code is performing. This has caused me to code in infinite loops
                    on
                    more than one occasion whilst experimenting with Go.
                &lt;/p&gt;

                &lt;p&gt;
                    Go also uses the range clause to achieve similar functionality to PHP&#39;s foreach. Where in PHP you
                    would
                    do this
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$myArrayOfThings = [1,2,3,4];
foreach($myArrayOfThings as $key =&gt; $value) {
  echo $key.&#34;-&#34;.$value.&#34;\n&#34;; //0-1 1-2 2-3 3-4
}&lt;/code&gt;
                &lt;/pre&gt;
                In Go the range statement is used instead
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myArrayOfInts := []int{1,2,3,4,5,6}
for key,value := range myArrayOfInts {
    fmt.Println(key,value)
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    One of the things I dislike about PHP is the ordering of the foreach statement, and as such I prefer
                    the
                    way Go does it. One minor annoyance with Go is that if you don&#39;t use a variable in the code it won&#39;t
                    compile. So if you only wish to use the key in the above you can use the magic _ character instead.
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myArrayOfInts := []int{1,2,3,4,5,6}
for key,_ := range myArrayOfInts {
    fmt.Println(key)
}&lt;/code&gt;
                &lt;/pre&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Functions&lt;/h3&gt;
                &lt;p&gt;
                    Functions in Go allow multiple return values which make moving from PHP to Go a lot easier than it
                    might
                    be moving from other dynamic languages to static languages.
                &lt;/p&gt;

                &lt;p&gt;
                    In PHP a function can return multiple types, this is useful in a lot of ways for instance, dealing
                    with
                    errors. An example of this in PHP would be:
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$result = updateSomething();
if(!$result) {
    return false;
}
echo &#34;Updated id &#34;.$id;&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;p&gt;
                    In Go we can use the fact that a function can return multiple values to increase code clarity whilst
                    achieving the same effect.
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;int, err := updateSomething()
if err == false {
  return false
}
fmt.Println(&#34;Updated id&#34;,id)&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;p&gt;This is a very brief look at Go in comparison to PHP. If you&#39;ve enjoyed this post and
                    would like to see
                    more please leave a comment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go compared with PHP arrays and slices</title>
      <link>http://alanhollis.com/php/go-compared-with-php-arrays-and-slices/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/go-compared-with-php-arrays-and-slices/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Go compared with php. Arrays and slices&lt;/h2&gt;
                &lt;/div&gt;


                &lt;p&gt;This is part of a series of articles comparing the language of Go to PHP.&lt;/p&gt;

                &lt;p&gt;
                    One of the things I love about PHP is how flexible and easy to use in the language, want an array of
                    strings just type
                &lt;/p&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Creating
                &lt;/h3&gt;
                &lt;p&gt;
                    Create an array in PHP
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;];&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go creating the above is a little more verbose and like variable assignment above there&#39;s also
                    multiple ways to create a slice. The most similar way to that of PHP is as follows.
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myStringArray := []string{&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Appending
                &lt;/h3&gt;
                &lt;p&gt;
                    Things become a little trickier when you want to append to an array. In PHP world this is easy
                &lt;/p&gt;
                &lt;pre&gt;&lt;code
                        class=&#34;php hljs&#34;&gt;$myStringArray=[&#34;One&#34;, &#34;Two&#34;, &#34;Three&#34;];\n
$myStringArray[] = &#34;Four&#34;;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go you need to use the global append function
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myStringArray := []string{&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;}
myStringArray = append(myStringArray,&#34;Four&#34;)
fmt.Println(myStringArray)&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Extracting
                &lt;/h3&gt;
                &lt;p&gt;
                    PHPs vast suite of inbuilt array functions make working with arrays simple. For instance to extract
                    part
                    of an array in PHP you can use the array_slice function.
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myArray = [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;,&#34;e&#34;];
$myNewArray = array_slice($myArray,2,2); // [&#34;c&#34;,&#34;d&#34;]&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    To achieve the same functionality in Go a little piece of syntactical magic is required
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myArray := []string{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;}
myNewArray := append([]string{},myArray[2:4]...) // [&#34;c&#34;,&#34;d&#34;]&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Iterating
                &lt;/h3&gt;
                &lt;p&gt;Iterating over a range of any function in PHP can be done using the construct.&lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;]
foreach ($myStringArray as $key =&amp;gt; value) {
  echo $key.&#34; &#34;.$string.&#34;\r\n&#34;;
}
//0 One
//1 Two
//3 Three&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go we use the range construct
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myStringArray := []string{&#34;one&#34;,&#34;two&#34;,&#34;three&#34;}
for key,value := range myStringArray {
  fmt.Println(key, value)&lt;/code&gt;
}&lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Imploding and Exploding
                &lt;/h3&gt;
                &lt;p&gt;
                    Joining an array into a string in PHP can be done using the built in implode function
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;];
$myString = implode(&#34; &#34;,$myStringArray);
echo $myString; // One Two Three&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    Golang uses the join function from the strings package which you are required to import to use
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;package main

import (
  &#34;fmt&#34;
  &#34;strings&#34;
)

func main() {
  myStringArray := []string{&#34;one&#34;,&#34;two&#34;,&#34;three&#34;}
  fmt.Println(strings.Join(myStringArray, &#34; &#34;))
}&lt;/code&gt;
                &lt;/pre&gt;
                To take a string and turn it into an array in PHP we use the explode function
                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$myString = &#34;One Two Three&#34;;
$myStringArray = explode(&#34; &#34;,$myString); // [&#34;One&#34;, &#34;Two&#34;, &#34;Three&#34;]&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    To take a string and turn it into an array in Golang we again need to use the strings package, but
                    this
                    time use the split function
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myString := &#34;one two three&#34;
myStringArray := strings.Split(myString, &#34; &#34;)
fmt.Println(myStringArray)&lt;/code&gt;
                &lt;/pre&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Solving bugs with phpunit and git bisect</title>
      <link>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Solving Bugs With Php Unit and Git Bisect&lt;/h2&gt;
                &lt;/div&gt;


                &lt;section class=&#34;post_content clearfix&#34; itemprop=&#34;articleBody&#34;&gt;
                    &lt;p&gt;Sometimes as developers we don’t always catch everything in our test, bugs being the tricky
                        things they are will always slip through the net. When they do we need to fix them, but where do
                        we begin?&lt;/p&gt;
                    &lt;p&gt;The answer, PHPUnit + git bisect, using git bisect and PHPUnit we can quickly narrow down what
                        commit caused the bug, which should allow us to find what caused and therefore solve the bug
                        really quickly.&lt;/p&gt;
                    &lt;p&gt;To see this in action let’s look at a very simple example. We have a FakeClass which contains a
                        single method who’s job is to return three things. The class looks something like this.&lt;/p&gt;

                    &lt;pre&gt;
                    &lt;code class=&#34;php hljs&#34;&gt;class FakeClass
{
	/**
	 * Returns three things
	 *
	 * @return array
	 */
	public function getThreeThings()
	{
		$things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];

		return $things;
	}
}
                    &lt;/code&gt;
                    &lt;/pre&gt;

                    &lt;p&gt;The class does a very simple thing, and we’re convinced it’s so simple we’ve not written a unit
                        test. Unfortunately this FakeClass doesn’t stay simple forever and over time we’ve ended up with
                        a lot of changes to this file.&lt;/p&gt;


                    &lt;pre&gt;
                    &lt;code class=&#34;diff hljs&#34;&gt;ad1a436 Add get four things method
708f57d Add return value PHPDoc
d4a81a4 Add phpdoc
33f9b00 Add get two things method
61deef0 Add returns phpdoc comment
85730ab Add get three things to FakeClass&lt;/code&gt;
                        &lt;/pre&gt;


                    &lt;p&gt;Somewhere in these commits, someone has broken the getThreeThings method, the customer is not
                        happy! First let’s create the unit test we left out in our haste to get the code shipped.&lt;/p&gt;

                    &lt;pre&gt;
                    &lt;code class=&#34;php hljs&#34;&gt;class FakeClassTest extends PHPUnit_Framework_TestCase
{
        private $fakeClass;

        public function setUp()
        {
                $this-&gt;fakeClass = new FakeClass();
        }

        public function testGetThreeThings()
        {
                $things = $this-&gt;fakeClass-&gt;getThreeThings();
                $this-&gt;assertEquals(3, sizeof($things));
        }
}
PHPUnit 3.7.28 by Sebastian Bergmann.

Configuration read from /home/alan/workspaces/bisect-log/phpunit.xml

F

Time: 44 ms, Memory: 3.25Mb

There was 1 failure:

1) FakeClassTest::testGetThreeThings
Failed asserting that 4 matches expected 3.

/home/alan/workspaces/bisect-log/tests/FakeClassTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.
                        &lt;/code&gt;
                        &lt;/pre&gt;
                    &lt;p&gt;Great now we have a test, and we know it’s failing. How can we find out which of the above
                        commits caused the error?&lt;/p&gt;
                    &lt;p&gt;First we need to enter git bisect mode.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect start&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;We know that this functionality worked at our first commit so let’s mark that commit as good.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect good &lt;/span&gt;&lt;span class=&#34;lit&#34;&gt;85730ab&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;And we know that the current commit is bad, so let’s mark that as bad.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect bad fbe6fb8&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;Now we’ve done everything we need to find the broken commit. All that’s left is to run our unit
                        test with git bisect.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect run phpunit tests&lt;/span&gt;&lt;span
                            class=&#34;pun&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;FakeClassTest&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;.&lt;/span&gt;&lt;span
                            class=&#34;pln&#34;&gt;php&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;Git moves through the commits using a binary search algorithm to find the first broken commit as
                        quickly as possible.&lt;/p&gt;
                    &lt;p&gt;After git bisect has zoomed through testing the commits it tells us the exact commit which caused
                        the problem.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span
                            class=&#34;pln&#34;&gt;ad1a436f0c15676cd5251e1d73c3af667e739a72 &lt;/span&gt;&lt;span class=&#34;kwd&#34;&gt;is&lt;/span&gt;&lt;span
                            class=&#34;pln&#34;&gt; the first bad commit&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;If we do a git diff we see:&lt;/p&gt;
                    &lt;pre&gt;
                    &lt;code class=&#34;diff hljs&#34;&gt;git diff ad1a436 HEAD

diff --git a/src/FakeClass.php b/src/FakeClass.php
index bd8a9a3..bbdf3a0 100644
--- a/src/FakeClass.php
+++ b/src/FakeClass.php
@@ -2,22 +2,13 @@
 class FakeClass
 {
        /**
-        */
-       public function getFourThings()
-       {
-               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];
-
-               return $things;
-       }
-
-       /**
         * Returns three things
         *
         * @return array
         */
        public function getThreeThings()
        {
-               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;];
+               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];

                return $things;
        }
}
                        &lt;/code&gt;

                    &lt;/pre&gt;
                    &lt;p&gt;The problem is pretty obvious now. I added a ‘four’ to the array in the getThreeThingsMethod, how
                        stupid.&lt;/p&gt;
                    &lt;p&gt;I hope this blog post has shown how powerful git bisect is, and although this example was really
                        simple, you can imagine how useful this is.&lt;/p&gt;
                    &lt;p&gt;The code behind this blog post can be found at &lt;a
                            href=&#34;https://github.com/Alan01252/git-phpunit-bisect-test&#34;&gt;https://github.com/Alan01252/git-phpunit-bisect-test&lt;br&gt;
                    &lt;/a&gt;&lt;/p&gt;
                &lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>