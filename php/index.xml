<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phps on Alan Hollis</title>
    <link>http://alanhollis.com/php/</link>
    <description>Recent content in Phps on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jan 2017 21:44:58 +0530</lastBuildDate><atom:link href="http://alanhollis.com/php/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Comparing go with PHP</title>
      <link>http://alanhollis.com/php/comparing-go-with-php/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/comparing-go-with-php/</guid>
      <description>Go compared with php. Arrays and slices  This is part of a series of articles comparing the language of Go to PHP
Variable assignment  In PHP variable assigned is very simple : $myString = &#34;My String&#34;;   In Go this is a little different. Go is statically typed meaning those familiar with other statically typed languages would expect to see something like String myString = &#34;My String&#34;</description>
    </item>
    
    <item>
      <title>Go compared with PHP arrays and slices</title>
      <link>http://alanhollis.com/php/go-compared-with-php-arrays-and-slices/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/go-compared-with-php-arrays-and-slices/</guid>
      <description>Go compared with php. Arrays and slices  Creating   Create an array in PHP $myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;];   In Go creating the above is a little more verbose and like variable assignment above there&#39;s also multiple ways to create a slice. The most similar way to that of PHP is as follows. myStringArray := []string{&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;}  Appending   Things become a little trickier when you want to append to an array.</description>
    </item>
    
    <item>
      <title>Solving bugs with phpunit and git bisect</title>
      <link>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</guid>
      <description>Solving Bugs With Php Unit and Git Bisect  Sometimes as developers we donâ€™t always catch everything in our test, bugs being the tricky things they are will always slip through the net. When they do we need to fix them, but where do we begin?
The answer, PHPUnit + git bisect, using git bisect and PHPUnit we can quickly narrow down what commit caused the bug, which should allow us to find what caused and therefore solve the bug really quickly.</description>
    </item>
    
  </channel>
</rss>
