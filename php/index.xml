<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Phps on Alan Hollis</title>
    <link>http://alanhollis.com/php/index.xml</link>
    <description>Recent content in Phps on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 26 Jan 2017 21:44:58 +0530</lastBuildDate>
    <atom:link href="http://alanhollis.com/php/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Solving bugs with phpunit and git bisect</title>
      <link>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Solving Bugs With Php Unit and Git Bisect&lt;/h2&gt;
                &lt;/div&gt;


                &lt;section class=&#34;post_content clearfix&#34; itemprop=&#34;articleBody&#34;&gt;
                    &lt;p&gt;Sometimes as developers we don’t always catch everything in our test, bugs being the tricky
                        things they are will always slip through the net. When they do we need to fix them, but where do
                        we begin?&lt;/p&gt;
                    &lt;p&gt;The answer, PHPUnit + git bisect, using git bisect and PHPUnit we can quickly narrow down what
                        commit caused the bug, which should allow us to find what caused and therefore solve the bug
                        really quickly.&lt;/p&gt;
                    &lt;p&gt;To see this in action let’s look at a very simple example. We have a FakeClass which contains a
                        single method who’s job is to return three things. The class looks something like this.&lt;/p&gt;

                    &lt;pre&gt;
                    &lt;code class=&#34;php hljs&#34;&gt;class FakeClass
{
	/**
	 * Returns three things
	 *
	 * @return array
	 */
	public function getThreeThings()
	{
		$things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];

		return $things;
	}
}
                    &lt;/code&gt;
                    &lt;/pre&gt;

                    &lt;p&gt;The class does a very simple thing, and we’re convinced it’s so simple we’ve not written a unit
                        test. Unfortunately this FakeClass doesn’t stay simple forever and over time we’ve ended up with
                        a lot of changes to this file.&lt;/p&gt;


                    &lt;pre&gt;
                    &lt;code class=&#34;diff hljs&#34;&gt;ad1a436 Add get four things method
708f57d Add return value PHPDoc
d4a81a4 Add phpdoc
33f9b00 Add get two things method
61deef0 Add returns phpdoc comment
85730ab Add get three things to FakeClass&lt;/code&gt;
                        &lt;/pre&gt;


                    &lt;p&gt;Somewhere in these commits, someone has broken the getThreeThings method, the customer is not
                        happy! First let’s create the unit test we left out in our haste to get the code shipped.&lt;/p&gt;

                    &lt;pre&gt;
                    &lt;code class=&#34;php hljs&#34;&gt;class FakeClassTest extends PHPUnit_Framework_TestCase
{
        private $fakeClass;

        public function setUp()
        {
                $this-&gt;fakeClass = new FakeClass();
        }

        public function testGetThreeThings()
        {
                $things = $this-&gt;fakeClass-&gt;getThreeThings();
                $this-&gt;assertEquals(3, sizeof($things));
        }
}
PHPUnit 3.7.28 by Sebastian Bergmann.

Configuration read from /home/alan/workspaces/bisect-log/phpunit.xml

F

Time: 44 ms, Memory: 3.25Mb

There was 1 failure:

1) FakeClassTest::testGetThreeThings
Failed asserting that 4 matches expected 3.

/home/alan/workspaces/bisect-log/tests/FakeClassTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.
                        &lt;/code&gt;
                        &lt;/pre&gt;
                    &lt;p&gt;Great now we have a test, and we know it’s failing. How can we find out which of the above
                        commits caused the error?&lt;/p&gt;
                    &lt;p&gt;First we need to enter git bisect mode.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect start&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;We know that this functionality worked at our first commit so let’s mark that commit as good.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect good &lt;/span&gt;&lt;span class=&#34;lit&#34;&gt;85730ab&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;And we know that the current commit is bad, so let’s mark that as bad.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect bad fbe6fb8&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;Now we’ve done everything we need to find the broken commit. All that’s left is to run our unit
                        test with git bisect.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect run phpunit tests&lt;/span&gt;&lt;span
                            class=&#34;pun&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;FakeClassTest&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;.&lt;/span&gt;&lt;span
                            class=&#34;pln&#34;&gt;php&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;Git moves through the commits using a binary search algorithm to find the first broken commit as
                        quickly as possible.&lt;/p&gt;
                    &lt;p&gt;After git bisect has zoomed through testing the commits it tells us the exact commit which caused
                        the problem.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span
                            class=&#34;pln&#34;&gt;ad1a436f0c15676cd5251e1d73c3af667e739a72 &lt;/span&gt;&lt;span class=&#34;kwd&#34;&gt;is&lt;/span&gt;&lt;span
                            class=&#34;pln&#34;&gt; the first bad commit&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;If we do a git diff we see:&lt;/p&gt;
                    &lt;pre&gt;
                    &lt;code class=&#34;diff hljs&#34;&gt;git diff ad1a436 HEAD

diff --git a/src/FakeClass.php b/src/FakeClass.php
index bd8a9a3..bbdf3a0 100644
--- a/src/FakeClass.php
+++ b/src/FakeClass.php
@@ -2,22 +2,13 @@
 class FakeClass
 {
        /**
-        */
-       public function getFourThings()
-       {
-               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];
-
-               return $things;
-       }
-
-       /**
         * Returns three things
         *
         * @return array
         */
        public function getThreeThings()
        {
-               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;];
+               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];

                return $things;
        }
}
                        &lt;/code&gt;

                    &lt;/pre&gt;
                    &lt;p&gt;The problem is pretty obvious now. I added a ‘four’ to the array in the getThreeThingsMethod, how
                        stupid.&lt;/p&gt;
                    &lt;p&gt;I hope this blog post has shown how powerful git bisect is, and although this example was really
                        simple, you can imagine how useful this is.&lt;/p&gt;
                    &lt;p&gt;The code behind this blog post can be found at &lt;a
                            href=&#34;https://github.com/Alan01252/git-phpunit-bisect-test&#34;&gt;https://github.com/Alan01252/git-phpunit-bisect-test&lt;br&gt;
                    &lt;/a&gt;&lt;/p&gt;
                &lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>