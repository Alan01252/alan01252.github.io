<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Alan Hollis</title>
    <link>http://alanhollis.com/index.xml</link>
    <description>Recent content on Alan Hollis</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sun, 05 Feb 2017 21:44:58 +0530</lastBuildDate>
    <atom:link href="http://alanhollis.com/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>contact</title>
      <link>http://alanhollis.com/thanks/</link>
      <pubDate>Sun, 05 Feb 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/thanks/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;;&#34;&gt;
                        Thanks!&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p style=&#34;margin-top:20px&#34;&gt;
                    Thank you for getting in contact. I&#39;ll reply as soon as I can.
                &lt;/p&gt;

            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>testimonials</title>
      <link>http://alanhollis.com/testimonials/</link>
      <pubDate>Fri, 03 Feb 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/testimonials/</guid>
      <description>&lt;style&gt;
    p {
        margin-top: 10px;
    }
&lt;/style&gt;

&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;;&#34;&gt;
                        Testimonials&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p&gt;Nice things people have said about me:&lt;/p&gt;

                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Jemma Pink: Director of Corporate Systems, Six Degrees Technology Group
                    Ltd&lt;/strong&gt;
                    &lt;p&gt;
                        I directly managed Alan for two years as my Head of Development at Six Degrees Group. We worked
                        closely together on business critical transformation projects where Alan always delivered. Rated
                        by his team as an exceptional manager, he was able to consistently inspire and lead them to
                        deliver technical solutions to specification, within time and to budget constraints necessary.

                    &lt;/p&gt;
                    &lt;p&gt;
                        He is a focused and driven individual with a genuine passion for his craft. Responsible for all
                        aspects of the development lifecycle including solution &amp; technical architecture, design, build,
                        test &amp; deployment. Alan is an extremely safe pair of hands with an ability to operate
                        effectively at both a strategic level and immersed in the finest of detail.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Alan is an asset to any organisation and I recommend him unreservedly.
                    &lt;/p&gt;
                &lt;/div&gt;

                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Rob Peddle, Director, The High Performance Organisation Group Ltd.&lt;/strong&gt;
                    &lt;p&gt;
                        Alan was asked to create an online reporting tool to integrate our unique and completely
                        redesigned online assessment tool, with the aim of significantly enhancing the way we reported
                        from it.
                    &lt;/p&gt;
                    &lt;p&gt;
                        Key requirements were high levels of flexibility, speed, security and availability.
                        Based on outline report template specifications, Alan was instrumental in helping to develop
                        these specifications designing, building and architecting a much faster more flexible reporting
                        tool, with excellent knowledge of the whole hardware stack. &lt;/p&gt;
                    &lt;p&gt;
                        Alan responded rapidly to changes
                        and further ideas throughout the process and was very efficient in the way he worked during the
                        project. I would thoroughly recommend Alan for this type of work.
                    &lt;/p&gt;
                &lt;/div&gt;


                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Tom Herbert: Six Degrees Technology Group Ltd&lt;/strong&gt;
                    &lt;p&gt;
                        Alan is resourceful, hard-working and organised. He has led the team on several projects, giving
                        sound direction on architecture and best practices in development and DevOps. He has been a
                        pleasure to work with and for.
                    &lt;/p&gt;
                &lt;/div&gt;

                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Maria Lomba: Six Degrees Technology Group Ltd&lt;/strong&gt;
                    &lt;p&gt;
                        If you need somebody to get the best from the people or to find out quickly how to solve a
                        problem using a computer he’s your man. Grows and gives room to grow. Able to switch his focus
                        between the forest and the bushes as needed. Always humble, always learning, always
                        experimenting.
                    &lt;/p&gt;
                &lt;/div&gt;

                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Jake Withecombe: &lt;a
                        href=&#34;http://ruggednetworks.co.uk/&#34;&gt;ruggednetworks.co.uk&lt;/a&gt;&lt;/strong&gt;
                    &lt;p&gt;
                        Alan has been a pleasure to work. From the beginning he fully understood the project
                        requirements and made many helpful suggestions as to how we could improve the system.The project
                        was finished well ahead of schedule and under budget. On more than one occasion Alan worked late
                        into the night – a clear indicator that he loves his work!
                    &lt;/p&gt;
                    &lt;p&gt;
                        I look forward to working with Alan in the future and would have no hesitation in recommending
                        him to anyone.
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Sylvain Reiter: &lt;a href=&#34;http://symble.net/&#34;&gt;symble.net&lt;/a&gt;&lt;/strong&gt;
                    &lt;p&gt;
                        Alan Hollis joined the Symble development team in June 2012 to help plan the architecture of our
                        next-generation platform. From the initial meeting, he showed great enthusiasm toward the
                        project and has always the best interest of the product in mind.Alan is a highly experienced and
                        talented developer with excellent communication skills and a highly professional approach to
                        development.&lt;/p&gt;
                    &lt;p&gt;
                        He goes on to make extra suggestions to improve projects, performing code reviews and always
                        helps other team members. He also pays very close attention to all the details and delivers
                        stable code and scalable solutions.
                    &lt;/p&gt;
                    &lt;p&gt;
                        I strongly recommend him and will definitely keep on working with him on future projects. Please
                        let me know if you have any questions about my experience in working with Alan.
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&#34;well&#34;&gt;

                    &lt;strong&gt;John Hamelink: &lt;a href=&#34;http://johnhamelink.com/&#34;&gt;johnhamelink.com&lt;/a&gt;&lt;/strong&gt;

                    &lt;p&gt;When I look for a developer, I&#39;m looking for someone who&#39;s highly intelligent, able
                        to turn a hand to anything, and is not afraid to point out flaws or try to improve something. If
                        you&#39;re looking for a robot, Alan is not your man. Alan is brilliant at spotting problems before
                        they
                        exist and pulling in his experience and putting it to work on your project. His work ethic and
                        dedication is second to none. I&#39;d recommend Alan to anyone.
                    &lt;/p&gt;

                &lt;/div&gt;
                &lt;div class=&#34;well&#34;&gt;

                    &lt;strong&gt;Kevin Brennan: Protel UK LTD&lt;/strong&gt;

                    &lt;p&gt;Alan is an excellent programmer. He proved to quickly understand the business
                        drivers and developed applications to meet our needs with little of the usual specification
                        detail
                        required by most developers. He&#39;s independent and takes a great deal of pride in his work as was
                        evident by his continued strive to improve system performance. It was a pleasure to work with
                        him.
                    &lt;/p&gt;

                &lt;/div&gt;
                &lt;div class=&#34;well&#34;&gt;&lt;strong&gt;Obi Ulasi: Protel UK LTD&lt;/strong&gt;
                    &lt;p&gt;
                        Alan is a very amiable and was a pleasure to work with.
                        He is an individual with a passion for software development, which enabled him to produce
                        effective
                        solutions in a timely manner.
                    &lt;/p&gt;
                &lt;/div&gt;
                &lt;div class=&#34;well&#34;&gt;

                    &lt;strong&gt;Michael Ward : &lt;a href=&#34;http://tidydesign.com&#34;&gt;TidyDesign.com&lt;/a&gt;&lt;/strong&gt;

                    &lt;p&gt;Firstly I would like to say it has been a great pleasure working with Alan on a
                        number of web based projects, I am delighted he called asking for this reference.

                        I first met Alan whilst studying at the University of Portsmouth, he has always been very
                        entrepreneurial and hardworking, looking to create his own unique brands and products. Like most
                        students, after graduating (2005) we went our separate ways in life / business however we
                        regularly
                        kept in-touch, often chatting on MSN about all things web related. Alan first helped Tidy Design
                        back in January 2009, when I sold our first hotel website / booking engine. Alan is the coder
                        genius
                        behind this bespoke system / database that has subsequently gathered interest from a global
                        audience.

                        http://hotelbookingreservationsystem.com/about-us.html

                        I would recommend Alan Hollis to any web design / development company; he is a very gifted coder
                        and
                        would be an asset to your business. Alan is not only hardworking and an all round nice guy; he
                        is
                        someone I believe will succeed in all he sets out to do, it is this mentality accompanied with
                        raw
                        talent that allows him build stable and complex systems.

                        So to conclude, if you have any questions about Alan or his work then please do not hesitate
                        contacting me, my personal email address is mike@mjward.co.uk
                    &lt;/p&gt;

                &lt;/div&gt;


            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>About Me</title>
      <link>http://alanhollis.com/about-me/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/about-me/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        About Me&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    Leading development teams I&#39;ve learned not just to manage, but to listen, to motivate and to
                    inspire. Through consulting, I&#39;ve learned the art of the sale, the value of long lasting connections
                    and the power of recommendation. As a support engineer I&#39;ve learned to not plaster over problems,
                    but to get to the heart of them.
                &lt;/p&gt;
                &lt;p&gt;
                    Programming has, through practice, hard work and dedication, given me the skills and experience to
                    solve problems. Experimenting with new technologies has shown me the strength of new ideas,
                    demonstrated the robustness of old ones, and taught me to be pragmatic with my selection of tools.
                &lt;/p&gt;

                &lt;p&gt;
                    When I&#39;m not trying out new technology I can be found practicing &#34;real life&#34; languages on &lt;a
                        href=&#34;https://www.duolingo.com/alan01276&#34;&gt;duolingo&lt;/a&gt;
                    or attempting to play along to some blues on my harmonica.
                &lt;/p&gt;

                &lt;p&gt;
                    If you&#39;re looking for someone to help with your next IT/Software project, or just for some free
                    advice
                    feel free to contact me using the form below.
                &lt;/p&gt;

                &lt;hr&gt;

                &lt;form method=&#34;POST&#34; action=&#34;https://formspree.io/me@alanhollis.com&#34;&gt;

                    &lt;input type=&#34;hidden&#34; name=&#34;_next&#34; value=&#34;//alanhollis.com/thanks/&#34;/&gt;

                    &lt;div class=&#34;form-group&#34;&gt;
                        &lt;input class=&#34;form-control&#34; type=&#34;email&#34; name=&#34;email&#34; placeholder=&#34;Your email&#34;&gt;
                    &lt;/div&gt;

                    &lt;div class=&#34;form-group&#34;&gt;
                                &lt;textarea class=&#34;form-control&#34; name=&#34;message&#34; placeholder=&#34;Your message&#34;
                                          rows=&#34;10&#34;&gt;&lt;/textarea&gt;
                    &lt;/div&gt;

                    &lt;button type=&#34;submit&#34; class=&#34;btn btn-primary&#34;&gt;Send&lt;/button&gt;
                &lt;/form&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>App Building</title>
      <link>http://alanhollis.com/app-building/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/app-building/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        App Building&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Architecture</title>
      <link>http://alanhollis.com/architecture/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/architecture/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;Architecture&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;row&#34;&gt;
    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;Case Studies&lt;/h2&gt;
                &lt;/div&gt;


                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Agricamera&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    Agricamera is a start-up competing in the CCTV industry. The unique value proposition is that
                    compared
                    to other CCTV providers their solution requires no third party intervention and &#34;just works&#34;.
                &lt;/p&gt;

                &lt;p&gt;
                    In order to achieve this goal the architecture needed to tackle the following challenges:
                &lt;ul&gt;
                    &lt;li&gt;Communicate with cameras behind home routers without the need for customers needing to log on
                        to the router
                    &lt;/li&gt;
                    &lt;li&gt;Allow support staff to diagnose networking problems&lt;/li&gt;
                    &lt;li&gt;Platform must be available at all times&lt;/li&gt;
                    &lt;li&gt;Customer must have best possible view of camera depending on where they current are, local
                        network / remote viewing
                    &lt;/li&gt;
                    &lt;li&gt;Cameras must be accessible via the widest range of devices&lt;/li&gt;
                    &lt;li&gt;Quickly scalable as customer base grows&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;
                    The bulk of the application is cloud base, with individual camera controllers running on
                    Agricamera&#39;s
                    customer networks. Every server is replicated more than one and high availability considered at all
                    points.
                    The application was designed to be internet based from the outset, differentiating Agricamera from
                    most
                    of its competitors.
                &lt;/p&gt;

                &lt;p&gt;
                    A single board computer is sold to each customer which sits on their network. The board is
                    programmed to automatically discover
                    cameras by scanning for appropriate mac addresses and then registering the cameras with the
                    application
                    servers via a web socket connection. This prevents the need to alter/configure their routers to
                    allow
                    remote access to their cameras.
                &lt;/p&gt;

                &lt;p&gt;
                    There are two methods by which the user can access their cameras. A web-based browser application,
                    and a
                    mobile application. The web-based application is written in PHP using require and knockout js. The
                    mobile application is built using the Ionic Framework and Angular.js which allow rapid development
                    across the largest number of devices whilst keeping one shared code base.
                &lt;/p&gt;

                &lt;p&gt;
                    Both the desktop and mobile applications are smart enough to work out whether the cameras are
                    available
                    on the local network and will pick the appropriate connection method depending on where the user is.
                    Agricamera&#39;s admin staff are able to configure different resolution streams on a per connection
                    and per device method. This ensures that the customers are always getting the best possible viewing
                    experience from the
                    platform.
                &lt;/p&gt;

                &lt;p&gt;
                    Each node application server runs on a single core, with Nginx used to balance the load between each
                    of them. Additionally, traffic is balanced via
                    Nginx for the web servers and the Nginx daemon running on the engines. This allows both vertical and
                    horizontal scaling of engine
                    servers. This is used to full effect when Agricamera&#39;s platform is used to stream popular events,
                    such as sheep shearing world records.
                &lt;/p&gt;

                &lt;p&gt;
                    The entire software platform is automatically monitored using Check MK and Nagios. Thorough
                    logging via ElasticSearch/LogStash and Kibana allow quick resolutions of support queries and technical
                    issues as they arise. Every server in the system is reproducible via Ansible.
                &lt;/p&gt;


                &lt;img src=&#34;http://alanhollis.com/agricamera-architecture.png&#34; class=&#34;img-rounded img-responsive&#34; style=&#34;width: 100%;&#34;&gt;

                &lt;p&gt;
                    At the time of writing the application is managing over 100 permanently connected camera controllers
                    with over 300
                    cameras streaming in real time.
                &lt;/p&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        TheFarmingForum&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;The Farming Forum was gaining popularity and quickly entering a level where the risks of running the
                    forum single on a server were no longer appropriate for the business.&lt;/p&gt;

                &lt;p&gt;
                    Xenforo is not designed to run on multiple servers out of the box and therefore understanding how
                    the existing system worked was crucial to the design of any other server. Assets were the big
                    problem
                    to solve as in order to move from one server to multiple, uploads and attachments created by forum
                    members would need to be moved into the cloud.
                &lt;/p&gt;

                &lt;p&gt;
                    Plugins were found for Xenforo which automated the process of assets being uploaded to the cloud.
                    A custom bash script using S3cmd was written which would transfer the existing assets into S3 and
                    update
                    the Xenforo database as appropriate.
                &lt;/p&gt;

                &lt;p&gt;
                    High availability would be achieved by utilising Linodes Nodebalancers. A single Nodebalancer would
                    sit in front of the web servers and round robin the traffic between them. Memcached was chosen to
                    store
                    the sessions information and the Xenforo software adapted to write all session information to each
                    Memcached instance.
                &lt;/p&gt;

                &lt;p&gt;
                    The database would be run in Master / Master mode with only one database being connected to at any
                    point
                    by the Xenforo software. Monitoring had shown that the biggest bottleneck in the application was CPU
                    on the
                    web servers and therefore scaling the database was not a priority. A Rundeck task would be created
                    that
                    would allow the master database server to swap over to the slave in case of downtime.
                &lt;/p&gt;

                &lt;img src=&#34;http://alanhollis.com/tff.png&#34; class=&#34;img-rounded img-responsive&#34; style=&#34;width: 100%;&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        The-Hpo.co.uk&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    The HPO came to me looking for help updating a critical legacy application to something more robust,
                    faster and reliable.
                &lt;/p&gt;

                &lt;p&gt;
                    By looking and understanding the existing system and how it interacted we were able to build a new
                    solution
                    which provided all the functionality of the previous system and satisfied all the criteria of above.
                &lt;/p&gt;

                &lt;p&gt;
                    The new system would comprise of five layers:
                &lt;/p&gt;

                &lt;ul&gt;
                    &lt;li&gt;An API to interact with the relational database&lt;/li&gt;
                    &lt;li&gt;A new thin client Javascript front end client&lt;/li&gt;
                    &lt;li&gt;A data warehouse which would store data in third normal form&lt;/li&gt;
                    &lt;li&gt;An Extract Transform Load application to perform the data integration&lt;/li&gt;
                    &lt;li&gt;A reporting engine to sit in front of the data warehouse to render the data in a meaningful way
                    &lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;
                    The application would reside entirely in the cloud. A single instance would run all the software
                    together
                    to keep costs low and the architecture simple. Thought was given as to how this could be split in
                    the
                    future,however, this design best fit the customer&#39;s needs at the present time. PHP and Javascript
                    frameworks
                    were chosen based on the clients existing experience with these technologies.
                &lt;/p&gt;

                &lt;p&gt;
                    The ETL engine would be built using the Apache Camel Library. Camel supports a number of enterprise
                    integration patters which were well suited to this project. Camel supports being able to write
                    custom
                    processors in Java and this was used to handle the more complex data transformations that were
                    needed
                    to implement HPO&#39;s reporting algorithms.
                &lt;/p&gt;

                &lt;p&gt;
                    SendGrid would be used to handle the emailing as this gave the customer far more visibility over
                    emails
                    that were sent from the reporting engine than before and would reduce what was a large contributor
                    to
                    the support overheads the customer was having. This also saved on the development time of the final
                    application.
                &lt;/p&gt;
            &lt;/div&gt;

        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Devops</title>
      <link>http://alanhollis.com/dev-ops/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/dev-ops/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        DevOps&lt;/h2&gt;
                &lt;/div&gt;
                &lt;p&gt;
                    &lt;a href=&#34;#case_studies&#34;&gt;Case Studies &lt;/a&gt;| &lt;a href=&#34;#tools&#34;&gt;Tools&lt;/a&gt;
                &lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        &lt;a name=&#34;case_studies&#34;&gt;Case Studies&lt;/a&gt;&lt;/h2&gt;
                &lt;/div&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        &lt;a name=&#34;tutorials&#34;&gt;Agricamera.co.uk&lt;/a&gt;&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    Agricamera&#39;s entire software environment was built with DevOps in mind from the start. Before any
                    new
                    software was written careful thought was taken to make sure the development environments were
                    immediately
                    reproducible by issuing just a couple of commands using Vagrant and Ansible. All of Agricamera&#39;s
                    services are cloud based.
                &lt;/p&gt;

                &lt;p&gt;
                    This forethought meant deploying to production was just an extension of the development process.
                    Ansible
                    scripts were created which allowed every aspect of Agricamera&#39;s architecture to be deployed and
                    re-deployed instantly.
                    This included provisioning of highly available node, web and database servers. As well as the
                    management of 100&#39;s of
                    remote devices deployed up and down the country.
                &lt;/p&gt;

                &lt;p&gt;
                    In order to monitor the servers, Agricamera use OMD/Check_MK ( wrappers around Nagios ) which provide
                    a number of
                    standard &#34;off the shelf checks&#34; on the system, as well as custom checks were written especially for
                    Agricamera&#39;s
                    software. Logstash and Kibana are used to give the ops team insight into customers problems with
                    bespoke
                    dashboards written to help better understand the systems. Integration with HipChat allows rapid
                    response
                    when problems do occur.
                &lt;/p&gt;

                &lt;p&gt;
                    Agricameras databases are automatically backed up to Amazon S3 using cron jobs written in Ansible.
                    The database restore process is also automated for simple &#34;worst case scenario&#34; data restorations.
                &lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        &lt;a name=&#34;tools&#34;&gt;Tools&lt;/a&gt;&lt;/h2&gt;
                &lt;/div&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        &lt;a name=&#34;tutorials&#34;&gt;Ansible&lt;/a&gt;&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    After experimenting with a number of DevOps tools over the years Ansible quickly stood out as my
                    favourite.
                    The syntax is easy to reason about, the way it works is intuitive, and it&#39;s quick to get up and
                    running for any
                    type of technology project.
                &lt;/p&gt;


            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>IT Strategy</title>
      <link>http://alanhollis.com/it-strategy/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/it-strategy/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        IT Strategy&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Marketing</title>
      <link>http://alanhollis.com/marketing/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/marketing/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Marketing&lt;/h2&gt;
                &lt;/div&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Software Development</title>
      <link>http://alanhollis.com/software-development/</link>
      <pubDate>Wed, 01 Feb 2017 12:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/software-development/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Software Development&lt;/h2&gt;
                &lt;/div&gt;


                &lt;p&gt;
                    &lt;a href=&#34;#portfolio&#34;&gt;Portfolio &lt;/a&gt;| &lt;a href=&#34;#tutorials&#34;&gt;Tutorials&lt;/a&gt;
                &lt;/p&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;


&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        &lt;a name=&#34;portfolio&#34;&gt;Portfolio&lt;/a&gt;&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p&gt;A summary of some the projects I&#39;m most proud of during my freelance career&lt;/p&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Assist-CKD.org&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    Assist-CKD is a quality improvement project supported by The Health Foundation which is looking to
                    identify patients with a high risk of Chronic Kidney Disease progression.
                &lt;/p&gt;

                &lt;p&gt;
                    The application is designed to take data from external systems in the NHS and then allow lab
                    technicians
                    to review the data in a way which makes spotting if a person is likely to be at risk of Chronic
                    Kidney Disease
                    Easier.
                &lt;/p&gt;

                &lt;p&gt;
                    The existing application had performance and maintenance problems as it was tightly coupled to SQL
                    Server
                    which meant each trust using the software had to purchase an expensive software license in order to
                    take part
                    in the trial. The application was re-written to allow a choice of relational database servers, from
                    MySQL To
                    SQLite.
                &lt;/p&gt;

                &lt;p&gt;
                    The incorporation of SQLLite into the software also allowed individual trusts to be up and running
                    as
                    minimal involvement from IT departments were required. The software could be installed and a trust
                    up and
                    running in less than five minutes.
                &lt;/p&gt;

                &lt;p&gt;
                    Written using electron.js the application is able to run on multiple environments ( windows, mac )
                    using only one codebase. The wealth of libraries written for node.js also meant the existing
                    application could be re-written quickly, to a greater standard than the original quickly and
                    inexpensively.
                &lt;/p&gt;

                &lt;p&gt;
                    Features Include:
                &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Fast import of CSV files containing millions of records&lt;/li&gt;
                    &lt;li&gt;Support for multiple databases utilising the sequelize.js library&lt;/li&gt;
                    &lt;li&gt;Database migrations and squirrel for easy updates to the application&lt;/li&gt;
                    &lt;li&gt;Automated testing via Karma.js, Phantom.js, and Karma-Electron&lt;/li&gt;
                &lt;/ul&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        AgriCamera.co.uk&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    AgriCamera.co.uk supplies CCTV to the agricultural industry. Due to the remote locations of the
                    installation locations the software had to be designed to work with low bandwidth locations.
                    H.264 was not a viable solution for AgriCamera due to the high latency involved which would render
                    the cameras which ability to move based on user feedback in real-time useless.
                &lt;/p&gt;

                &lt;p&gt;
                    AgriCamera runs a hardware on the customer&#39;s wifi which then transmits a compressed mjpeg stream to a
                    centralised application
                    built using Node.Js. Transportation of the images is achieved through the use of socket.io. The
                    centralised engine allows
                    a single mjpeg stream to be shared to multiple viewers without increasing the bandwidth usage at the
                    client&#39;s site.
                &lt;/p&gt;

                &lt;p&gt;
                    AgriCamera has a mobile application written using Ionic/PhoneGap allowed quick iteration of design
                    and
                    ideas across the most number of devices. The mobile application quickly became one of the most
                    popular
                    ways for clients to access their mobile applications. Particular attention had to be paid to the
                    performance of the application in order to make sure that
                    the quality of the stream remained high. The application also provided a &#34;low bandwidth mode&#34; for
                    those
                    customer&#39;s who&#39;s mobile signal was often poor.
                &lt;/p&gt;

                &lt;p&gt;
                    Features Include:
                &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Ability to choose multiple streams based on the speed of the customers connection&lt;/li&gt;
                    &lt;li&gt;Full permissions based viewing of cameras&lt;/li&gt;
                    &lt;li&gt;Motion Detection based recordings&lt;/li&gt;
                    &lt;li&gt;Ability to &#34;mask&#34; sections of an image for greater motion accuracy&lt;/li&gt;
                    &lt;li&gt;Automated scalability of service&lt;/li&gt;
                    &lt;li&gt;Real-time logging and system diagnosis&lt;/li&gt;
                    &lt;li&gt;Secure remote updates&lt;/li&gt;
                &lt;/ul&gt;

                &lt;p&gt;
                    This technology allows AgriCamera to deliver a unique value proposition to their clients.
                &lt;/p&gt;


                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        The-Hpo.com&lt;/h3&gt;
                &lt;/div&gt;

                &lt;p&gt;
                    The HPO provide an online auditing tool to help their clients better understand their businesses.
                    The software driving their auditing tool had become hard to maintain and wasn&#39;t able to cope with
                    the
                    amount of data that The HPO were now handling. The customer front end also lacked visual appeal and
                    needed to become more flexible as customers began looking for more ways to understand their data.
                &lt;/p&gt;

                &lt;p&gt;
                    The application required the design and implementation of a data warehouse. Using the techniques
                    from
                    the book &lt;a
                        href=&#34;https://www.amazon.co.uk/Agile-Data-Warehouse-Design-Collaborative/dp/0956817203&#34;&gt;&lt;/a&gt;
                    the HPO to build a warehouse which would fit their needs, and incorporate their existing
                    algorithms whilst performing much more effectively than the previous version of the code.
                &lt;/p&gt;

                &lt;p&gt;
                    A reporting front end was creating using Yii which allowed customers to view their reports. The
                    backend
                    involves some non-trivial SQL queries, and careful consideration of what and how to index the data
                    in the
                    MySQL database was needed.
                &lt;/p&gt;

                &lt;p&gt;
                    Integration with ordering data was achieved by writing a custom extract transform load application
                    utilising the Apache Camel
                    Library.
                    This allowed The HPO to quickly, easily and robustly build an integration engine between the
                    normalised OLTP database and
                    the OLAP database used for the warehouse.
                &lt;/p&gt;

                &lt;p&gt;
                    Features Include:
                &lt;/p&gt;
                &lt;ul&gt;
                    &lt;li&gt;Full frontend application allowing customisation of templates and reporting&lt;/li&gt;
                    &lt;li&gt;Extract Transform Load application&lt;/li&gt;
                    &lt;li&gt;Design and architecture of a data warehouse&lt;/li&gt;
                    &lt;li&gt;Full front end reporting system, utilising HighCharts and the Yii Php Framework&lt;/li&gt;
                &lt;/ul&gt;

            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;

&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        &lt;a name=&#34;tutorials&#34;&gt;Tutorials&lt;/a&gt;&lt;/h2&gt;
                &lt;/div&gt;


                &lt;p&gt;Some of the tutorials guides I&#39;ve written over the years&lt;/p&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h3
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        PHP&lt;/h3&gt;

                &lt;/div&gt;
                &lt;ul&gt;
                    &lt;li&gt;&lt;a href=&#34;http://alanhollis.com/solving-bugs-phpunit-git-bisect/&#34;&gt;Solving bugs with PHPUnit and git bisect&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;http://alanhollis.com/comparing-go-with-php/&#34;&gt;Go compared with PHP&lt;/a&gt;&lt;/li&gt;
                    &lt;li&gt;&lt;a href=&#34;http://alanhollis.com/go-compared-with-php-arrays-and-slices/&#34;&gt;Go compared with PHP. Arrays and Slices&lt;/a&gt;&lt;/li&gt;
                &lt;/ul&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Comparing go with PHP</title>
      <link>http://alanhollis.com/php/comparing-go-with-php/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/comparing-go-with-php/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Go compared with php. Arrays and slices&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p&gt;This is part of a series of articles comparing the language of Go to PHP&lt;/p&gt;


                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Variable assignment&lt;/h3&gt;
                &lt;p&gt;
                    In PHP variable assigned is very simple :
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myString = &#34;My String&#34;;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go this is a little different. Go is statically typed meaning those familiar with other
                    statically
                    typed languages would expect to see something like
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;java hljs&#34;&gt;String myString = &#34;My String&#34;;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go the type can be inferred from the expression. For instance to assign a string to a variable in
                    Go
                    you can do any one of the following:
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;&gt;var myString = &#34;hello&#34;
//or
myString := &#34;Hello&#34;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    To change the value later Go a single = is used
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;myString := &#34;myString&#34;
myString = &#34;foo&#34;
fmt.Println(myString) //Prints out Foo&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    I prefer the way variable assignment is done in Go. It makes it very easy to see where the variable
                    has
                    been instantiated, where it&#39;s been changed and in 99% of times the type inference isn&#39;t an issue.
                &lt;/p&gt;

                &lt;p&gt;
                    Also note that the use of semicolons in Golang is optional
                &lt;/p&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    If statements&lt;/h3&gt;
                If statements are very similar in both PHP and Golang in PHP
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;if($i &lt; 3) {
  echo &#34;$i is less than 3&#34;;
                     &lt;/code&gt;
}&lt;/pre&gt;
                In Go
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;if x &gt; 0 {
   fmt.Println(x,&#34;is greater than zero&#34;)
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    The biggest difference are the optional brackets around the if statement. Braces are also mandatory
                    and
                    the first brace must be on the same line as the if.
                &lt;/p&gt;
                &lt;p&gt;
                    This fits with the &lt;a
                        href=&#34;https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-2-coding-style-guide.md&#34;&gt;psr-2
                    PHP fig standards&lt;/a&gt; and as such is really familiar to most PHP developers.
                &lt;/p&gt;
                &lt;p&gt;
                    The biggest difference is it&#39;s common to see an initialization statement at the beginning of the if
                    statement, so instead of seeing this:
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$i = getMyVar();
if($i &lt; 3) {
  echo &#34;$i is less than 3&#34;;

}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    You see
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hljs&#34;&gt;if x:=getMyVar(); x &gt; 0 {
    fmt.Println(x,&#34;is greater than zero&#34;)
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    Personally I&#39;m not keen on this syntax as I find it slightly harder to realise at a glance what the
                    if
                    statement is checking, but this is purely a matter of preference.
                &lt;/p&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Loops&lt;/h3&gt;
                &lt;p&gt;
                    Go takes an usual step when it comes to looping. The familiar while loop seen is most of languages
                    based
                    on C has been unified with the for loop meaning to do this
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;while($i &lt; 3) {
$i++
}&lt;/code&gt;
                &lt;/pre&gt;
                In Go you write
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;for i &lt; 4 {
    i++
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    When I&#39;m writing PHP code I tend to use &lt;em&gt;while&lt;/em&gt; for longer running loops, and
                    &lt;em&gt;for&lt;/em&gt; for loops over a finite set of data. I find it harder when writing Go code to see, at a
                    glance see what type of loop, the code is performing. This has caused me to code in infinite loops
                    on
                    more than one occasion whilst experimenting with Go.
                &lt;/p&gt;

                &lt;p&gt;
                    Go also uses the range clause to achieve similar functionality to PHP&#39;s foreach. Where in PHP you
                    would
                    do this
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$myArrayOfThings = [1,2,3,4];
foreach($myArrayOfThings as $key =&gt; $value) {
  echo $key.&#34;-&#34;.$value.&#34;\n&#34;; //0-1 1-2 2-3 3-4
}&lt;/code&gt;
                &lt;/pre&gt;
                In Go the range statement is used instead
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myArrayOfInts := []int{1,2,3,4,5,6}
for key,value := range myArrayOfInts {
    fmt.Println(key,value)
}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    One of the things I dislike about PHP is the ordering of the foreach statement, and as such I prefer
                    the
                    way Go does it. One minor annoyance with Go is that if you don&#39;t use a variable in the code it won&#39;t
                    compile. So if you only wish to use the key in the above you can use the magic _ character instead.
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myArrayOfInts := []int{1,2,3,4,5,6}
for key,_ := range myArrayOfInts {
    fmt.Println(key)
}&lt;/code&gt;
                &lt;/pre&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Functions&lt;/h3&gt;
                &lt;p&gt;
                    Functions in Go allow multiple return values which make moving from PHP to Go a lot easier than it
                    might
                    be moving from other dynamic languages to static languages.
                &lt;/p&gt;

                &lt;p&gt;
                    In PHP a function can return multiple types, this is useful in a lot of ways for instance, dealing
                    with
                    errors. An example of this in PHP would be:
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$result = updateSomething();
if(!$result) {
    return false;
}
echo &#34;Updated id &#34;.$id;&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;p&gt;
                    In Go we can use the fact that a function can return multiple values to increase code clarity whilst
                    achieving the same effect.
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;int, err := updateSomething()
if err == false {
  return false
}
fmt.Println(&#34;Updated id&#34;,id)&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;p&gt;This is a very brief look at Go in comparison to PHP. If you&#39;ve enjoyed this post and
                    would like to see
                    more please leave a comment.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Go compared with PHP arrays and slices</title>
      <link>http://alanhollis.com/php/go-compared-with-php-arrays-and-slices/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/go-compared-with-php-arrays-and-slices/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Go compared with php. Arrays and slices&lt;/h2&gt;
                &lt;/div&gt;


                &lt;p&gt;This is part of a series of articles comparing the language of Go to PHP.&lt;/p&gt;

                &lt;p&gt;
                    One of the things I love about PHP is how flexible and easy to use in the language, want an array of
                    strings just type
                &lt;/p&gt;

                &lt;h3 style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Creating
                &lt;/h3&gt;
                &lt;p&gt;
                    Create an array in PHP
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;];&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go creating the above is a little more verbose and like variable assignment above there&#39;s also
                    multiple ways to create a slice. The most similar way to that of PHP is as follows.
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myStringArray := []string{&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;}&lt;/code&gt;
                &lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Appending
                &lt;/h3&gt;
                &lt;p&gt;
                    Things become a little trickier when you want to append to an array. In PHP world this is easy
                &lt;/p&gt;
                &lt;pre&gt;&lt;code
                        class=&#34;php hljs&#34;&gt;$myStringArray=[&#34;One&#34;, &#34;Two&#34;, &#34;Three&#34;];\n
$myStringArray[] = &#34;Four&#34;;&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go you need to use the global append function
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myStringArray := []string{&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;}
myStringArray = append(myStringArray,&#34;Four&#34;)
fmt.Println(myStringArray)&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Extracting
                &lt;/h3&gt;
                &lt;p&gt;
                    PHPs vast suite of inbuilt array functions make working with arrays simple. For instance to extract
                    part
                    of an array in PHP you can use the array_slice function.
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myArray = [&#34;a&#34;,&#34;b&#34;,&#34;c&#34;,&#34;d&#34;,&#34;e&#34;];
$myNewArray = array_slice($myArray,2,2); // [&#34;c&#34;,&#34;d&#34;]&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    To achieve the same functionality in Go a little piece of syntactical magic is required
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myArray := []string{&#34;a&#34;, &#34;b&#34;, &#34;c&#34;, &#34;d&#34;, &#34;e&#34;}
myNewArray := append([]string{},myArray[2:4]...) // [&#34;c&#34;,&#34;d&#34;]&lt;/code&gt;
                    &lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Iterating
                &lt;/h3&gt;
                &lt;p&gt;Iterating over a range of any function in PHP can be done using the construct.&lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hljs&#34;&gt;$myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;]
foreach ($myStringArray as $key =&amp;gt; value) {
  echo $key.&#34; &#34;.$string.&#34;\r\n&#34;;
}
//0 One
//1 Two
//3 Three&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    In Go we use the range construct
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myStringArray := []string{&#34;one&#34;,&#34;two&#34;,&#34;three&#34;}
for key,value := range myStringArray {
  fmt.Println(key, value)&lt;/code&gt;
}&lt;/pre&gt;
                &lt;h3
                        style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                    Imploding and Exploding
                &lt;/h3&gt;
                &lt;p&gt;
                    Joining an array into a string in PHP can be done using the built in implode function
                &lt;/p&gt;

                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$myStringArray = [&#34;One&#34;,&#34;Two&#34;,&#34;Three&#34;];
$myString = implode(&#34; &#34;,$myStringArray);
echo $myString; // One Two Three&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    Golang uses the join function from the strings package which you are required to import to use
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;package main

import (
  &#34;fmt&#34;
  &#34;strings&#34;
)

func main() {
  myStringArray := []string{&#34;one&#34;,&#34;two&#34;,&#34;three&#34;}
  fmt.Println(strings.Join(myStringArray, &#34; &#34;))
}&lt;/code&gt;
                &lt;/pre&gt;
                To take a string and turn it into an array in PHP we use the explode function
                &lt;pre&gt;&lt;code class=&#34;php hjls&#34;&gt;$myString = &#34;One Two Three&#34;;
$myStringArray = explode(&#34; &#34;,$myString); // [&#34;One&#34;, &#34;Two&#34;, &#34;Three&#34;]&lt;/code&gt;
                &lt;/pre&gt;
                &lt;p&gt;
                    To take a string and turn it into an array in Golang we again need to use the strings package, but
                    this
                    time use the split function
                &lt;/p&gt;
                &lt;pre&gt;&lt;code class=&#34;go hjls&#34;&gt;myString := &#34;one two three&#34;
myStringArray := strings.Split(myString, &#34; &#34;)
fmt.Println(myStringArray)&lt;/code&gt;
                &lt;/pre&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Solving bugs with phpunit and git bisect</title>
      <link>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/php/solving-bugs-phpunit-git-bisect/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        Solving Bugs With Php Unit and Git Bisect&lt;/h2&gt;
                &lt;/div&gt;


                &lt;section class=&#34;post_content clearfix&#34; itemprop=&#34;articleBody&#34;&gt;
                    &lt;p&gt;Sometimes as developers we don’t always catch everything in our test, bugs being the tricky
                        things they are will always slip through the net. When they do we need to fix them, but where do
                        we begin?&lt;/p&gt;
                    &lt;p&gt;The answer, PHPUnit + git bisect, using git bisect and PHPUnit we can quickly narrow down what
                        commit caused the bug, which should allow us to find what caused and therefore solve the bug
                        really quickly.&lt;/p&gt;
                    &lt;p&gt;To see this in action let’s look at a very simple example. We have a FakeClass which contains a
                        single method who’s job is to return three things. The class looks something like this.&lt;/p&gt;

                    &lt;pre&gt;
                    &lt;code class=&#34;php hljs&#34;&gt;class FakeClass
{
	/**
	 * Returns three things
	 *
	 * @return array
	 */
	public function getThreeThings()
	{
		$things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];

		return $things;
	}
}
                    &lt;/code&gt;
                    &lt;/pre&gt;

                    &lt;p&gt;The class does a very simple thing, and we’re convinced it’s so simple we’ve not written a unit
                        test. Unfortunately this FakeClass doesn’t stay simple forever and over time we’ve ended up with
                        a lot of changes to this file.&lt;/p&gt;


                    &lt;pre&gt;
                    &lt;code class=&#34;diff hljs&#34;&gt;ad1a436 Add get four things method
708f57d Add return value PHPDoc
d4a81a4 Add phpdoc
33f9b00 Add get two things method
61deef0 Add returns phpdoc comment
85730ab Add get three things to FakeClass&lt;/code&gt;
                        &lt;/pre&gt;


                    &lt;p&gt;Somewhere in these commits, someone has broken the getThreeThings method, the customer is not
                        happy! First let’s create the unit test we left out in our haste to get the code shipped.&lt;/p&gt;

                    &lt;pre&gt;
                    &lt;code class=&#34;php hljs&#34;&gt;class FakeClassTest extends PHPUnit_Framework_TestCase
{
        private $fakeClass;

        public function setUp()
        {
                $this-&gt;fakeClass = new FakeClass();
        }

        public function testGetThreeThings()
        {
                $things = $this-&gt;fakeClass-&gt;getThreeThings();
                $this-&gt;assertEquals(3, sizeof($things));
        }
}
PHPUnit 3.7.28 by Sebastian Bergmann.

Configuration read from /home/alan/workspaces/bisect-log/phpunit.xml

F

Time: 44 ms, Memory: 3.25Mb

There was 1 failure:

1) FakeClassTest::testGetThreeThings
Failed asserting that 4 matches expected 3.

/home/alan/workspaces/bisect-log/tests/FakeClassTest.php:14

FAILURES!
Tests: 1, Assertions: 1, Failures: 1.
                        &lt;/code&gt;
                        &lt;/pre&gt;
                    &lt;p&gt;Great now we have a test, and we know it’s failing. How can we find out which of the above
                        commits caused the error?&lt;/p&gt;
                    &lt;p&gt;First we need to enter git bisect mode.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect start&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;We know that this functionality worked at our first commit so let’s mark that commit as good.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect good &lt;/span&gt;&lt;span class=&#34;lit&#34;&gt;85730ab&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;And we know that the current commit is bad, so let’s mark that as bad.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect bad fbe6fb8&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;Now we’ve done everything we need to find the broken commit. All that’s left is to run our unit
                        test with git bisect.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span class=&#34;pln&#34;&gt;git bisect run phpunit tests&lt;/span&gt;&lt;span
                            class=&#34;pun&#34;&gt;/&lt;/span&gt;&lt;span class=&#34;typ&#34;&gt;FakeClassTest&lt;/span&gt;&lt;span class=&#34;pun&#34;&gt;.&lt;/span&gt;&lt;span
                            class=&#34;pln&#34;&gt;php&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;Git moves through the commits using a binary search algorithm to find the first broken commit as
                        quickly as possible.&lt;/p&gt;
                    &lt;p&gt;After git bisect has zoomed through testing the commits it tells us the exact commit which caused
                        the problem.&lt;/p&gt;
                    &lt;pre class=&#34;prettyprint lang=bash&#34;&gt;&lt;span
                            class=&#34;pln&#34;&gt;ad1a436f0c15676cd5251e1d73c3af667e739a72 &lt;/span&gt;&lt;span class=&#34;kwd&#34;&gt;is&lt;/span&gt;&lt;span
                            class=&#34;pln&#34;&gt; the first bad commit&lt;/span&gt;&lt;/pre&gt;
                    &lt;p&gt;If we do a git diff we see:&lt;/p&gt;
                    &lt;pre&gt;
                    &lt;code class=&#34;diff hljs&#34;&gt;git diff ad1a436 HEAD

diff --git a/src/FakeClass.php b/src/FakeClass.php
index bd8a9a3..bbdf3a0 100644
--- a/src/FakeClass.php
+++ b/src/FakeClass.php
@@ -2,22 +2,13 @@
 class FakeClass
 {
        /**
-        */
-       public function getFourThings()
-       {
-               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];
-
-               return $things;
-       }
-
-       /**
         * Returns three things
         *
         * @return array
         */
        public function getThreeThings()
        {
-               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;, &#39;four&#39;];
+               $things = [&#39;one&#39;, &#39;two&#39;, &#39;three&#39;];

                return $things;
        }
}
                        &lt;/code&gt;

                    &lt;/pre&gt;
                    &lt;p&gt;The problem is pretty obvious now. I added a ‘four’ to the array in the getThreeThingsMethod, how
                        stupid.&lt;/p&gt;
                    &lt;p&gt;I hope this blog post has shown how powerful git bisect is, and although this example was really
                        simple, you can imagine how useful this is.&lt;/p&gt;
                    &lt;p&gt;The code behind this blog post can be found at &lt;a
                            href=&#34;https://github.com/Alan01252/git-phpunit-bisect-test&#34;&gt;https://github.com/Alan01252/git-phpunit-bisect-test&lt;br&gt;
                    &lt;/a&gt;&lt;/p&gt;
                &lt;/section&gt;
            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>contact</title>
      <link>http://alanhollis.com/contact/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/contact/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Ledger&#39;, serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;;&#34;&gt;
                        Contact Me&lt;/h2&gt;
                &lt;/div&gt;


                &lt;form method=&#34;POST&#34; action=&#34;https://formspree.io/me@alanhollis.com&#34;&gt;

                    &lt;input type=&#34;hidden&#34; name=&#34;_next&#34; value=&#34;//alanhollis.com/thanks/&#34; /&gt;

                    &lt;div class=&#34;form-group&#34;&gt;
                        &lt;input class=&#34;form-control&#34; type=&#34;email&#34; name=&#34;email&#34; placeholder=&#34;Your email&#34;&gt;
                    &lt;/div&gt;

                    &lt;div class=&#34;form-group&#34;&gt;
                                &lt;textarea class=&#34;form-control&#34; name=&#34;message&#34; placeholder=&#34;Your message&#34;
                                          rows=&#34;10&#34;&gt;&lt;/textarea&gt;
                    &lt;/div&gt;

                    &lt;button type=&#34;submit&#34; class=&#34;btn btn-primary&#34;&gt;Send&lt;/button&gt;
                &lt;/form&gt;


            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>first month freelancing</title>
      <link>http://alanhollis.com/freelancing/first-month-freelancing/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/freelancing/first-month-freelancing/</guid>
      <description>&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        First Month Freelancing&lt;/h2&gt;
                &lt;/div&gt;

                &lt;strong&gt;What I&#39;ve learnt&lt;/strong&gt;
                &lt;ul&gt;
                    &lt;li&gt;There is plenty of work out there, for someone who knows what they&#39;re doing.&lt;/li&gt;
                    &lt;li&gt;There are a lot of web development companies looking for full time developer roles.&lt;/li&gt;
                    &lt;li&gt;It&#39;s hard to say no to full time employment when you&#39;re starting out.&lt;/li&gt;
                    &lt;li&gt;Most companies will try to bid you down on price, don&#39;t accept straight away. Reach a compromise that works for you both.&lt;/li&gt;
                    &lt;li&gt;There are a lot of companies making money producing bad code, there&#39;s money to be made fixing bad code.&lt;/li&gt;
                    &lt;li&gt;There are a lot of failed companies with legacy code which now needs to be maintained.&lt;/li&gt;
                    &lt;li&gt;Debugging and finding a solution to a customers problem despite having to wade through bad code &lt;em&gt;is&lt;/em&gt; fun.&lt;/li&gt;
                    &lt;li&gt;It takes time for people to get back to you, to get contracts sorted, to get feedback on work.&lt;/li&gt;
                    &lt;li&gt;Waiting is frustrating. Have a side project to work on whilst you wait.&lt;/li&gt;
                    &lt;li&gt;Getting payment terms down to 10 days is impossible for some companies, but not for all.&lt;/li&gt;
                    &lt;li&gt;If you don&#39;t ask you don&#39;t get.&lt;/li&gt;
                    &lt;li&gt;People want to pay you hourly/per project, convince them it&#39;s better for both you and them to pay you daily. I&#39;ll explain why in a future post.&lt;/li&gt;
                    &lt;li&gt;Get the specification of work nailed down as thoroughly as you can, it&#39;s mutually beneficial to you and your customers.&lt;/li&gt;
                    &lt;li&gt;There&#39;s a lot more to learn.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;strong&gt;How I found work&lt;/strong&gt;
                &lt;ul&gt;
                    &lt;li&gt;Created this blog, hosted it on Rackspace, made it run fast.&lt;/li&gt;
                    &lt;li&gt;Emailed web design companies in and around the local area using this Blog as my CV.&lt;/li&gt;
                    &lt;li&gt;Posted adverts on Gumtree. ( a free classified ads service in the UK )&lt;/li&gt;
                    &lt;li&gt;Posted on web forums for those technologies which I used in their advertisement section.&lt;/li&gt;
                    &lt;li&gt;Getting in contact with friends and telling them I&#39;ve started freelancing. ( A big thank you to all my friends who have been incredibly supportive so far).&lt;/li&gt;
                    &lt;li&gt;Entered a programming competition, this hasn&#39;t directly lead to work, but I&#39;m hoping might work well for me in the future.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;div&gt;&lt;/div&gt;
                &lt;div&gt;&lt;strong&gt;What tools/software am I using&lt;/strong&gt;&lt;/div&gt;
                &lt;div&gt;
                    &lt;ul&gt;
                        &lt;li&gt;&lt;a href=&#34;http://www.siwapp.org/&#34;&gt;http://www.siwapp.org/&lt;/a&gt; Free opensource invoicing software.&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;http://www.rackspace.co.uk&#34;&gt;http://www.rackspace.co.uk &lt;/a&gt; For hosting and fanatical support.&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;http://git-scm.com&#34;&gt;http://git-scm.com/&lt;/a&gt; Git for version control because it&#39;s awesome.&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;https://github.com/Alan01252/receiptstracker&#34;&gt;https://github.com/Alan01252/receiptstracker&lt;/a&gt; A simple YII based application for tracking receipts written by myself.&lt;/li&gt;
                        &lt;li&gt;&lt;a href=&#34;https://one.ubuntu.com/&#34;&gt;https://one.ubuntu.com/&lt;/a&gt; Providing my backup needs.&lt;/li&gt;
                    &lt;/ul&gt;
                &lt;/div&gt;
                &lt;div&gt;&lt;/div&gt;
                &lt;strong&gt;How much money have I made&lt;/strong&gt;
                &lt;ul&gt;
                    &lt;li&gt;£1,785.25&lt;/li&gt;
                &lt;/ul&gt;
                &lt;strong&gt;What&#39;s my plan for next month&lt;/strong&gt;
                &lt;ul&gt;
                    &lt;li&gt;Continue to satisfy my existing clients producing quality/maintainable code.&lt;/li&gt;
                    &lt;li&gt;Branch out and try to find some hosting/long term contracts with monthly recurring revenue.&lt;/li&gt;
                    &lt;li&gt;Continue to work on my start up ideas.&lt;/li&gt;
                &lt;/ul&gt;
                &lt;strong&gt;Suggestions&lt;/strong&gt;

                Any thoughts or advice you&#39;d like to share for someone starting out would be greatly appreciated.

            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>first year freelancing</title>
      <link>http://alanhollis.com/freelancing/my-first-year-freelancing/</link>
      <pubDate>Thu, 26 Jan 2017 21:44:58 +0530</pubDate>
      
      <guid>http://alanhollis.com/freelancing/my-first-year-freelancing/</guid>
      <description>&lt;style&gt;
    h2 {
        margin-top: 20px;
        margin-bottom: 20px;
    }

    h3 {
        font-size: 20px;
        font-family: &#39;Open Sans&#39;, sans-serif;
        margin-top: 20px;
        margin-bottom: 20px;
    }

    lead {
        font-size: 10px;
    }
&lt;/style&gt;
&lt;div class=&#34;row&#34;&gt;

    &lt;div class=&#34;col&#34;&gt;
        &lt;div class=&#34;card&#34; style=&#34;font-family: &#39;Open Sans&#39;, sans-serif;&#34;&gt;

            &lt;div class=&#34;card-block&#34;&gt;

                &lt;div class=&#34;card-title&#34;&gt;
                    &lt;h2
                            style=&#34;font-weight:bold;font-family: &#39;Nixie One&#39;; margin-bottom: 20px&#34;&gt;
                        First Year Freelancing&lt;/h2&gt;
                &lt;/div&gt;

                &lt;p class=&#34;lead&#34;&gt;I&#39;ve always wanted to work for myself. Last year I starting doing just that.&lt;/p&gt;

                &lt;h2&gt;This is what I&#39;ve learned so far:&lt;/h2&gt;
                &lt;h3&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;Charge more&lt;/span&gt;&lt;/h3&gt;
                Working out what to charge is probably the hardest part of working for yourself. When I first started
                out I was undercharging. It quickly became apparent that freelancing wasn&#39;t a viable career choice if I
                wanted to maintain or better my standard of living.

                My advice for others now would be to follow a formula similar to as follows:
                &lt;ul&gt;
                    &lt;li&gt;Take the salary you&#39;d want to earn as a full time employee.&lt;/li&gt;
                    &lt;li&gt;Double it.&lt;/li&gt;
                    &lt;li&gt;Divide your doubled salary by the amount of days you&#39;d work as a regular employee.&lt;/li&gt;
                    &lt;li&gt;This is the &lt;em&gt;minimum&lt;/em&gt; rate you should charge per day.&lt;/li&gt;
                &lt;/ul&gt;
                If your thought process is anything like mine once was, you&#39;ll think this figure is ridiculously high,
                it&#39;s not.

                Not only does charging more help you realise your financial ambitions, increasing your rate also
                attracts you to better projects, and once working on those projects helps with the amount of influence
                you can impose.
                &lt;h3&gt;Be cautious choosing clients&lt;/h3&gt;
                A lot of freelancing is being able to understand who a good client is and a bad client. We as developers
                are incredibly privileged right now,  supply seems to be heavily out striping demand and therefore we
                can afford to be picky. I&#39;ve had multiple occasions where my gut has said this client doesn&#39;t
                &lt;em&gt;feel&lt;/em&gt; right and therefore decided to turn down the work. There are plenty of other fantastic
                clients out there and I&#39;m happy to say my gut so far has always been right.

                Retainers are a great way to add security to what is ( or can be ) a pretty uncertain financial path,
                however they don&#39;t come without risks. You have to make sure any retainer you agree to works for both
                you and the client. If the client is asking for 24/7 on call support you either need to refuse, or
                charge enough for this support that you could then afford another two of you to look after the
                customer. Turning down a retainer when I was just starting out freelancing is probably one of &lt;em&gt;the
                best &lt;/em&gt;decisions I have made so far.
                &lt;h3&gt;Focus on selling to companies&lt;/h3&gt;
                I now truly believe that anyone wanting to be a successful freelancer should be focusing almost all of
                their attention on working with/for companies and not individuals. My reasons for this are as follows:
                &lt;ul&gt;
                    &lt;li&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;Companies spend money on solving problems.&lt;/span&gt;&lt;/li&gt;
                    &lt;li&gt;Companies will spend&lt;strong&gt; more money&lt;/strong&gt; for &lt;em&gt;you and your experience&lt;/em&gt;.&lt;/li&gt;
                    &lt;li&gt;Companies want code that&#39;s been written properly. They&#39;re willing to spend more in an attempt
                        to guarantee that quality.
                    &lt;/li&gt;
                &lt;/ul&gt;
                &lt;h3&gt;Keep in contact with all you colleagues old and new&lt;/h3&gt;
                The highest paid work I&#39;ve received so far has come via referrals from my old work colleagues. I always
                try to maintain the very best relationships I can with everyone I&#39;ve worked with. I&#39;ve been surprised on
                more than one occasion by where and who new leads can come from.

                &lt;em&gt;&lt;/em&gt;I&#39;ve also had the opportunity to send leads to other developers I&#39;ve met during my first twelve
                months. I really enjoy this aspect of freelancing, and it&#39;s one I hope to increase, and make profitable
                in the future.
                &lt;h2&gt;How&#39;s did the last year go:&lt;/h2&gt;
                &lt;h3&gt;Financially&lt;/h3&gt;
                Last financial year the accounts show a gross profit of &lt;em&gt;£49,265.25&lt;/em&gt;. Approximately £2000 of this
                was earned from retainers, the rest has been earned via a mixture of various short term projects. This
                is more than I thought I would achieve in my first year, which is fantastic. In the future I want to
                focus more on recurring revenue streams, either by building products, or selling suitable
                retainer/maintenance contracts.
                &lt;h3&gt;With my work life balance&lt;/h3&gt;
                I &#34;worked&#34; less and earn&#39;t more than I ever have done on my life so far, which can only be defined as a
                success. It&#39;s not all been plain sailing, freelancing has at times been incredibly stressful and the
                biggest single cause of that stress is the worry of finding that next pay cheque.

                To mitigate this I&#39;ve built up a bigger financial reserve and taken on a longer term project. This has
                come with certain lifestyle sacrifices ( I&#39;ll be working more ) but with the gain of greater security (
                I&#39;ll be paid regularly ).

                That being said, freelancing and not knowing exactly what&#39;s next or what&#39;s coming around the corner
                is exhilarating  I&#39;ve worked on projects I wouldn&#39;t of believed existed, worked for companies of every
                possible size in multiple industries, and met some incredibly talented people, all this in just twelve
                months.
                &lt;h3&gt;Marketing myself&lt;/h3&gt;
                The biggest success I&#39;ve had in promoting myself is this blog which now sits at roughly number 2 for the
                phrase &lt;a title=&#34;Freelance PHP Developer&#34; href=&#34;http://alanhollis.com/php-developer/&#34;&gt;freelance PHP
                developer&lt;/a&gt; on UK search results. This is resulting in around 2-3 leads a week without any effort on
                my part on optimising the conversion process. I can attribute this to three simple steps:
                &lt;ol&gt;
                    &lt;li&gt;&lt;span style=&#34;line-height: 13px;&#34;&gt;Make your blog fast&lt;/span&gt;&lt;/li&gt;
                    &lt;li&gt;Not being afraid to submit posts on social media sites ( &lt;em&gt;A big thank to the &lt;strong&gt;Hacker
                        News&lt;/strong&gt; community&lt;/em&gt; )
                    &lt;/li&gt;
                    &lt;li&gt;Sharing knowledge&lt;/li&gt;
                &lt;/ol&gt;
                &lt;h3&gt;What&#39;s next?&lt;/h3&gt;
                All of these posts so far have been filled with empty promises I&#39;ve not achieved, so my goal for the
                next year is simply this :
                &lt;blockquote&gt;To have fun and continue to build on what I started last year.&lt;/blockquote&gt;
                &lt;h2&gt;&lt;strong&gt;Suggestions?&lt;/strong&gt;&lt;/h2&gt;
                I&#39;ll end this post the same way the post &lt;a title=&#34;First month freelancing.&#34;
                                                            href=&#34;http://alanhollis.com/first-month-freelancing/&#34;&gt;first
                month freelancing&lt;/a&gt; ended and that&#39;s asking for help. Any thoughts or advice you’d like to share with
                someone a year into their freelance career would be greatly appreciated.

                Feel free to discuss this post on &lt;a href=&#34;https://news.ycombinator.com/item?id=5714930&#34;&gt;Hacker News&lt;/a&gt;.


            &lt;/div&gt;
        &lt;/div&gt;
    &lt;/div&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>